name: Package Manager
on:
  pull_request:    
    types: [opened, edited, synchronize, reopened]
    branches:
      - main
    paths:
      - repository/*

  push:
    branches:
      - main
    paths:
      - repository/*

jobs:
  validate:
    runs-on: windows-latest
    outputs: 
      base-directory: ${{ steps.setup.outputs.base-directory }} 
      changed-files: ${{ steps.validate.outputs.projects }} 

    steps:
      
      - uses: actions/checkout@v4
        with:
          fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}

      - id: setup
        run: |
          $baseDirectory = (get-item ".").parent.fullpath
          write-output "base-directory=$baseDirectory" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - id: validate
        run: |
          . ./scripts/pwsh/_validate-input.ps1 `
              -sha '${{ github.sha }}' `
              -eventname "${{ github.event_name }}" `
              -eventbefore "${{ github.event.before }}" `
              -eventafter "${{ github.event.after }}"
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GH_REPO_MANAGER_TOKEN }}
        
  create-repository:
    needs: validate
    runs-on: windows-latest
    if: |
      always() && 
      github.ref == 'refs/heads/main' && 
      github.event_name == 'push' && 
      needs.validate.result =='success'

    steps:
      - uses: actions/checkout@v4

      - run: |
          $projects='${{ needs.validate.outputs.changed-files }}' | convertfrom-json
          $projects | foreach-object {
            $project = $_
            $template = . ./scripts/pwsh/_clone-template.ps1 -project:$project
          }
        shell: pwsh
        working-directory: ${{ needs.validate.outputs.base-directory }}
        env:
          GH_TOKEN: ${{ secrets.GH_REPO_MANAGER_TOKEN }}
